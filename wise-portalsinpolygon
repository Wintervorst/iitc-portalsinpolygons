// The following code is a JavaScript and Leaflet port of the Winding Number (wn) 
// C++ implementation by Dan Sunday. https://geomalgorithms.com/.
// Copyright 2000 softSurfer, 2012 Dan Sunday
//... copy rest from Dan Sunday copyright notices
//

//
// isLeft tests if a point is left|on|right of an infinite line.
// @param p1 LatLng
// @param p2 LatLng
// @return >0 for p2 left of the line through this point and p1
//          =0 for p2 on the line
//          <0 for p2 right of the line through this point an p1
// 
LatLng.prototype.isLeft = function (p1, p2) {
  return ((p1.lng - this.lng) * (p2.lat - this.lat)
          - (p2.lng - this.lng) * (p1.lat - this.lat));
};

//
// getWindingNumber tests for a point in a polygon.
// @param p LatLng a point
// @retun Number The winding number (=0 only when the point is outside)
Polygon.prototype.getWindingNumber = function (p) {
   var i,
       V,
       wn;
   V = this.etLatLngs();
   wn = 0;
   for (i=0; i<v.length; i++) {
      if (V[i].lat <= p.lat){
         if (V[i+1].lat > p.lat) {
            if (V[i].isLeft(V[i+1], p) > 0) {
               wn++;
            }
         }
      } else {
        if (V[i+1].lat <= p.lat) {
           if (V[i].isLeft(V[i+1], p) < 0) {
              wn--;
           }
        }
      }
   }
   return wn;
};


//
polygon.prototype.contains = function (p) {
   var rectangularBounds = polygon.getBounds();
   var wn;
   if (rectangularBounds.contains(point)) {
      wn = this.getWindingNumber(point);
      return (wn !== 0);
   } else {
      return false;
   }
};

//
function portalsInPolygon() {
   // TODO: get the polygon or circle
   var rectangularBounds = polygon.getBounds();
   var keys = portals.getKeys();
   var wn;
   var portalsInPolygon = [];
   for (var i=0; i< keys.length; i++) {
       var portal = portals[keys[i]];
       var point = L.latLng (portal.options.latE6 / 1E6, portal.options.lngE6 / 1E6);
       // See if the point is within the rectangular boundary region containing the polygon.
       if (rectangularBounds.contains(point)) {
          wn = polygon.getWindingNumber(point);
          if (wn !== 0) {
              portalsInPolygon.push(portal);
          }
       }
   }
   return portalsInPolygon;
}
